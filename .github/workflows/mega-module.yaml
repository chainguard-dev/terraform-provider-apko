name: Test Chainguard Images
on:
  pull_request:
    branches: ['main']
  push:
    branches: ['main']

concurrency:
  group: presubmit-build-${{ github.head_ref }}
  cancel-in-progress: true

permissions:
  # WARNING: This is mattmoor being a bit *too* clever.
  # We want to be able to test the reproducibility of things via the upstream
  # check-reproducibility test, which requires ambient credentials, but those
  # are only available to pull requests under two circumstances:
  #  1. The trigger is `pull_request_target`, and
  #  2. The pull request is from a branch on the main repo.
  # However, this doesn't cause things to fail when the pull request is from a
  # fork, it will just make the tf-cosign rules NOPs and the
  # check-repoducibility skip.
  #
  # But why not just use pull_request_target?
  # This is because to pull in breaking changes to apko, we will need to update
  # our apko Go dependency and the APKO_IMAGE (below) in the same PR, and the
  # latter cannot be checked with the former if the workflow is
  # pull_request_target.
  #
  # All of that said, dependabot and digestabot PRs come from branches on the
  # main repo, so the net effect of this SHOULD be that we get an error
  # presubmit when digestabot wants to pull in an update that is not
  # reproducible with the version of the apko Go library we depend on.
  id-token: write

jobs:
  build-the-world:
    runs-on: ubuntu-latest

    steps:
    # In some cases, we runs out of disk space during tests, so this hack frees up approx 10G.
    # See the following issue for more info: https://github.com/actions/runner-images/issues/2840#issuecomment-1284059930
    - name: Free up runner disk space
      shell: bash
      run: |
        set -x
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        path: tf-apko
    - uses: actions/setup-go@v5
      with:
        go-version-file: 'tf-apko/go.mod'

    - working-directory: tf-apko
      run: go build .

    # Make cosign/crane CLI available to the tests
    - uses: sigstore/cosign-installer@e1523de7571e31dbe865fd2e80c5c7c23ae71eb4 # v3.4.0
    - uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3

    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        repository: chainguard-images/images
        path: images

    - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
      with:
        terraform_version: '1.3.*'
        terraform_wrapper: false

    - uses: chainguard-dev/actions/setup-k3d@main
      with:
        k3s-image: cgr.dev/chainguard/k3s:latest@sha256:2cce22ae3d776f2b924de7735bb10647320b1563dbca4ab1082a1eedae3b81c5
        registry-authority: registry.local:5000

    - working-directory: images
      env:
        TF_VAR_target_repository: registry.local:5000/tf-apko
        APKO_IMAGE: ghcr.io/wolfi-dev/apko:latest@sha256:d693d9433e659071ef3bdd5b200f0ba7f363abaa6d467c43d7b43acdc6096f5c
      run: |
        terraform init

        cat > ~/.terraformrc <<EOF
        provider_installation {
          dev_overrides {
            "chainguard-dev/apko" = "${{ github.workspace }}/tf-apko"
          }
        }
        EOF

        terraform apply -auto-approve \
          -target=module.go \
          -target=module.jdk \
          -target=module.python \
          -target=module.kubernetes
          # TODO(joshwolf): reinclude this once we understand why the tests are failing.
          # -target=module.k3s

    - name: Collect diagnostics and upload
      if: ${{ failure() }}
      uses: chainguard-dev/actions/k8s-diag@main
      with:
        cluster-type: k3d
